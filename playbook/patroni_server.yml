---
- name: Configure PostgreSQL
  hosts: meta-role_patroni_server
  any_errors_fatal: true
  become: true
  become_user: root
  roles:
    - local.pgdg
    - local.timescaledb
    - kostiantyn-nemchenko.patroni
  tasks:
    - name: Create patronictl configuration directory
      file:
        state: directory
        recurse: true
        path: "{{ ansible_env.HOME }}/.config/patroni/"

    - name: Create patroni configuration link
      file:
        state: link
        src: "{{ patroni_config_dir }}/{{ patroni_config_file }}"
        dest: "{{ ansible_env.HOME }}/.config/patroni/patronictl.yaml"

    # Wait until postgresql becomes ready
    - name: Check PostgreSQL server availability
      postgresql_ping:
      become: true
      become_user: "{{ postgresql_user }}"
      register: pg_is_in_available
      retries: "{{ retries|default(10) }}"
      delay: "{{ delay|default(30) }}"
      until: pg_is_in_available.is_available

    # Identify which node is primary
    - name: Get the recovery status of postgresql
      postgresql_query:
        query: select pg_is_in_recovery();
      become: true
      become_user: "{{ postgresql_user }}"
      register: pg_is_in_recovery
      retries: "{{ retries|default(10) }}"
      delay: "{{ delay|default(30) }}"
    - debug:
        var: pg_is_in_recovery.query_result[0].pg_is_in_recovery

    # Shameless copy of https://github.com/geerlingguy/ansible-role-postgresql/blob/master/tasks/users.yml
    - name: Ensure PostgreSQL users are present.
      postgresql_user:
        name: "{{ item.name }}"
        password: "{{ item.password | default(omit) }}"
        encrypted: "{{ item.encrypted | default(omit) }}"
        priv: "{{ item.priv | default(omit) }}"
        role_attr_flags: "{{ item.role_attr_flags | default(omit) }}"
        db: "{{ item.db | default(omit) }}"
        login_host: "{{ item.login_host | default('localhost') }}"
        login_password: "{{ item.login_password | default(omit) }}"
        login_user: "{{ item.login_user | default(postgresql_user) }}"
        login_unix_socket: "{{ item.login_unix_socket | default('/var/run/postgresql') }}"
        port: "{{ item.port | default(omit) }}"
        state: "{{ item.state | default('present') }}"
      with_items: "{{ patroni_users }}"
      no_log: "{{ patroni_users_no_log|default(true) }}"
      become: true
      become_user: "{{ postgresql_user|default('postgres') }}"
      when: not pg_is_in_recovery.query_result[0].pg_is_in_recovery

    - name: Ensure PostgreSQL databases are present.
      postgresql_db:
        name: "{{ item.name }}"
        lc_collate: "{{ item.lc_collate | default('en_US.UTF-8') }}"
        lc_ctype: "{{ item.lc_ctype | default('en_US.UTF-8') }}"
        encoding: "{{ item.encoding | default('UTF-8') }}"
        template: "{{ item.template | default('template0') }}"
        login_host: "{{ item.login_host | default('localhost') }}"
        login_password: "{{ item.login_password | default(omit) }}"
        login_user: "{{ item.login_user | default(postgresql_user) }}"
        login_unix_socket: "{{ item.login_unix_socket | default('/var/run/postgresql') }}"
        port: "{{ item.port | default(omit) }}"
        owner: "{{ item.owner | default(postgresql_user) }}"
        state: "{{ item.state | default('present') }}"
      with_items: "{{ patroni_databases }}"
      become: true
      become_user: "{{ postgresql_user|default('postgres') }}"
      when: not pg_is_in_recovery.query_result[0].pg_is_in_recovery
